const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')  //需要提供给渲染器一个 缓存对象
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')  //压缩和解压
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')  //渲染器

// 创建一个渲染器
//const renderer = require('vue-server-renderer').createRenderer()

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()


const request = require('request')
const async = require('async')
const xmldom = require("xmldom")
const cheerio = require("cheerio")  //解析为文档对象

/**
 * 生成页面片数据
 */
const parseSSI = (HtmlString, callback) => {
  let matches = HtmlString.match(/<!--\s?#include virtual="[^"]+"\s?-->/mg) //匹配SSI 规则
  if (!matches) {
    callback(HtmlString)
  } else {
    async.each(matches, function(item, callback) {
      let filepath = item.match(/virtual="([^"]+)"/)[1];
      let url = 'http://wqs.jd.com' + filepath //页面片URL
      request(url, function(err, response, body) {
        if (err) {
          callback(err)
        } else {
          let content = ''
            //拆解CSS Comfile 路径
          if (body.indexOf('<link combofile=') != -1) {
            let m = body.match(/\/c\/=([^\?"]+)/m)
            if (m) {
              content = m[1].split(',').map(function(item) {
                return '<link rel="stylesheet" href="//wq.360buyimg.com' + item + '">'
              }).join('\n')
            } else {
              content = body;
            }
          } else {
            content = body;
          }
          HtmlString = HtmlString.replace(item, content) //替换
          callback()
        }
      })
    }, function(err) {
      callback(HtmlString)
    })
  }
}

var  template = fs.readFileSync(resolve('./src/index.html'), 'utf-8')

parseSSI(template, (content) => {
  template = content
  // console.log("parseSSI", content)
})


function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise

//生产环境
if (isProd) {
  // 生产环境，引用 server bundle 做服务器直出
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // 开发环境: setup the dev server 启动更新和hot-reload
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const cacheable = isCacheable(req)
  if (cacheable) {
    const hit = microCache.get(req.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      // console.log("缓存", hit)
      return res.end(hit)
    }
  }

  const context = {
    title: '装修服务', // default title
    url: req.url
  }
  // console.log("rendererrendererrenderer", renderer)
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    // console.log("render html", html)
    let $ = cheerio.load(html)
    $("#app").after('<div id="app-async"></div>')
    html = $.html()
    // console.log("render html", html)
    res.end(html)
    if (cacheable) {
      microCache.set(req.url, html)
    }
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

//路由访问，直出
app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
